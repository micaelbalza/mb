// ***************************************************
// Programação de Baixo Nível
//	Ponteiros para funções 
//
// ***************************************************

#include <stdio.h>

// ***************************************************
// O typedef a seguir cria um tipo chamado 'TipoFuncao' que define um 
// tipo de dado que é uma função.
// O que determina o tipo, neste caso é:
// - o tipo de retorno da função;
// - os parâmetros usados na função. Leva-se em conta a quantidade, 
//	 a ordem e o tipo destes parâmetros 
typedef int TipoFuncao();


// ***************************************************
// As três funções a seguir são do mesmo tipo de 'TipoFuncao'
// ***************************************************

int Load()
{
	// Veja o que significa a macro __FUNCTION__ em 
	// https://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html#Standard-Predefined-Macros
	printf("%s\n", 	__FUNCTION__);
	return 10;
}

int Print()
{
	printf("%s\n", 	__func__);
	return 20;
}
int Quit()
{
	printf("%s\n", 	__func__);
	return 30;
}
// ***************************************************
//	Funcao que recebe um ponteiro para uma função
//	'PonteiroParaUmaFuncao' e uma variável que irá 
//	armazenar o valor deste ponteiro 'GuardaEnderecoDeUmaFuncao'
// ***************************************************
void SetCallbackFunc(TipoFuncao **GuardaEnderecoDeUmaFuncao, TipoFuncao *PonteiroParaUmaFuncao)
{
	*GuardaEnderecoDeUmaFuncao = PonteiroParaUmaFuncao;
}

int main()
{
	int opcao, retorno;
	// Cria 3 ponteiros que irão apontar para funções do programa
	TipoFuncao *ptrF;

	// Faz cada um dos ponteiros apontar para uma função diferente 
	
	do {
		printf("Digite sua opcao(1,2,3) :");
		scanf("%d", &opcao);
		switch(opcao) {
			case 1:
				ptrF = Load;
				break;
			case 2:
				ptrF = Print;
				break;
			case 3:
				SetCallbackFunc(&ptrF, Quit);
				break;
		}
		retorno = (*ptrF)(); // chama uma função a partir de ptrF
							 // e obtem o retorno 
		printf ("Retorno da função: %d\n\n", retorno);
	} while(opcao !=3);
}